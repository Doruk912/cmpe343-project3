import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShoppingCart {
    private List<Map<String, Object>> items;
    private double total;
    private double taxRate;
    private double discountRate;

    public ShoppingCart() {
        // Initialize the shopping cart with an empty list of items
        this.items = new ArrayList<>();
        this.total = 0.0;
        this.taxRate = 0.1;  // Example tax rate (10%)
        this.discountRate = 0.0;  // Discount rate (no discount by default)
    }

    public void addItem(Map<String, Object> item, int quantity) {
        // Add an item to the shopping cart or update its quantity if it already exists
        for (Map<String, Object> cartItem : items) {
            if (cartItem.get("item_id").equals(item.get("item_id"))) {
                int currentQuantity = (int) cartItem.get("quantity");
                cartItem.put("quantity", currentQuantity + quantity);
                double price = (double) cartItem.get("price");
                cartItem.put("subtotal", price * (currentQuantity + quantity));
                updateTotal();
                return;
            }
        }

        // Add new item to cart if it doesn't exist
        item.put("quantity", quantity);
        double price = (double) item.get("price");
        item.put("subtotal", price * quantity);
        items.add(item);
        updateTotal();
    }

    public void removeItem(int itemId, int quantity) {
        // Remove a specific quantity of an item from the shopping cart
        for (Map<String, Object> cartItem : items) {
            if (cartItem.get("item_id").equals(itemId)) {
                int currentQuantity = (int) cartItem.get("quantity");
                if (currentQuantity > quantity) {
                    cartItem.put("quantity", currentQuantity - quantity);
                    double price = (double) cartItem.get("price");
                    cartItem.put("subtotal", price * (currentQuantity - quantity));
                } else {
                    items.remove(cartItem);
                }
                updateTotal();
                return;
            }
        }
    }

    public void applyDiscount(double discountRate) {
        // Apply a discount to the entire cart
        this.discountRate = discountRate;
        updateTotal();
    }

    public void removeDiscount() {
        // Remove the discount from the shopping cart
        this.discountRate = 0.0;
        updateTotal();
    }

    public double calculateTax() {
        // Calculate the tax for the total amount
        return total * taxRate;
    }

    private void updateTotal() {
        // Recalculate the total of the cart, including any discounts and taxes
        double subtotal = 0.0;
        for (Map<String, Object> item : items) {
            subtotal += (double) item.get("subtotal");
        }
        double discount = subtotal * discountRate;
        double tax = (subtotal - discount) * taxRate;

        total = subtotal - discount + tax;
    }

    public Map<String, Object> getCartSummary() {
        // Return a summary of the shopping cart, including items, subtotal, discount, tax, and total
        double subtotal = 0.0;
        for (Map<String, Object> item : items) {
            subtotal += (double) item.get("subtotal");
        }
        double discount = subtotal * discountRate;
        double tax = (subtotal - discount) * taxRate;

        Map<String, Object> summary = new HashMap<>();
        summary.put("items", items);
        summary.put("subtotal", subtotal);
        summary.put("discount", discount);
        summary.put("tax", tax);
        summary.put("total", total);

        return summary;
    }

    public void clearCart() {
        // Clear all items from the shopping cart and reset the total
        items.clear();
        total = 0.0;
        discountRate = 0.0;
    }

    public static void main(String[] args) {
        // Example usage
        ShoppingCart cart = new ShoppingCart();

        // Create an example item
        Map<String, Object> item = new HashMap<>();
        item.put("item_id", 1);
        item.put("name", "Example Item");
        item.put("type", "Type A");
        item.put("price", 10.0);

        // Add item to cart
        cart.addItem(item, 2);

        // Apply discount
        cart.applyDiscount(0.1);

        // Get cart summary
        Map<String, Object> summary = cart.getCartSummary();
        System.out.println(summary);
    }
}
