import java.sql.*;
import java.util.*;

public class ReportGenerator {
    private Connection conn;
    private Statement stmt;

    public ReportGenerator(String dbName) throws SQLException {
        // Initialize the ReportGenerator with the provided database name
        String url = "jdbc:sqlite:" + dbName;
        this.conn = DriverManager.getConnection(url);
        this.stmt = conn.createStatement();
    }

    public Map<String, Double> getTotalRevenue() throws SQLException {
        // Generate a report on the total revenue from ticket sales and product sales
        Map<String, Double> revenueReport = new HashMap<>();

        // Total revenue from ticket sales
        ResultSet ticketResult = stmt.executeQuery("SELECT SUM(price) FROM Tickets");
        double ticketRevenue = ticketResult.next() ? ticketResult.getDouble(1) : 0.0;

        // Total revenue from product sales
        ResultSet productResult = stmt.executeQuery("SELECT SUM(total_price) FROM Sales");
        double productRevenue = productResult.next() ? productResult.getDouble(1) : 0.0;

        double totalRevenue = ticketRevenue + productRevenue;

        revenueReport.put("ticket_revenue", ticketRevenue);
        revenueReport.put("product_revenue", productRevenue);
        revenueReport.put("total_revenue", totalRevenue);

        return revenueReport;
    }

    public List<Map<String, Object>> getRevenueByMovie() throws SQLException {
        // Generate a report on revenue generated by each movie
        List<Map<String, Object>> revenueByMovie = new ArrayList<>();

        String query = "SELECT m.title, SUM(t.price) FROM Tickets t JOIN Movies m ON t.movie_id = m.movie_id GROUP BY m.title";
        ResultSet resultSet = stmt.executeQuery(query);

        while (resultSet.next()) {
            Map<String, Object> movieRevenue = new HashMap<>();
            movieRevenue.put("title", resultSet.getString(1));
            movieRevenue.put("revenue", resultSet.getDouble(2));
            revenueByMovie.add(movieRevenue);
        }

        return revenueByMovie;
    }

    public Map<String, Map<String, Double>> getRevenueByDay() throws SQLException {
        // Generate a report on revenue generated by day (ticket + product sales)
        Map<String, Map<String, Double>> revenueByDay = new HashMap<>();

        // Ticket revenue by day
        String ticketQuery = "SELECT DATE(purchase_date), SUM(price) FROM Tickets GROUP BY DATE(purchase_date)";
        ResultSet ticketResult = stmt.executeQuery(ticketQuery);

        while (ticketResult.next()) {
            String date = ticketResult.getString(1);
            double ticketRevenue = ticketResult.getDouble(2);
            revenueByDay.putIfAbsent(date, new HashMap<>());
            revenueByDay.get(date).put("ticket_revenue", ticketRevenue);
        }

        // Product revenue by day
        String productQuery = "SELECT DATE(sale_date), SUM(total_price) FROM Sales GROUP BY DATE(sale_date)";
        ResultSet productResult = stmt.executeQuery(productQuery);

        while (productResult.next()) {
            String date = productResult.getString(1);
            double productRevenue = productResult.getDouble(2);
            revenueByDay.putIfAbsent(date, new HashMap<>());
            revenueByDay.get(date).put("product_revenue", productRevenue);
        }

        return revenueByDay;
    }

    public List<Map<String, Object>> getProductSalesReport() throws SQLException {
        // Generate a report on product sales, including the quantity sold and total sales
        List<Map<String, Object>> productSales = new ArrayList<>();

        String query = "SELECT p.name, SUM(s.quantity) AS quantity_sold, SUM(s.total_price) AS total_sales " +
                "FROM Sales s JOIN Products p ON s.product_id = p.product_id GROUP BY p.name";
        ResultSet resultSet = stmt.executeQuery(query);

        while (resultSet.next()) {
            Map<String, Object> productSale = new HashMap<>();
            productSale.put("name", resultSet.getString(1));
            productSale.put("quantity_sold", resultSet.getInt(2));
            productSale.put("total_sales", resultSet.getDouble(3));
            productSales.add(productSale);
        }

        return productSales;
    }

    public Map<String, Double> getTaxReport() throws SQLException {
        // Generate a report on tax collected from ticket and product sales
        Map<String, Double> taxReport = new HashMap<>();
        double taxRate = 0.10; // 10% tax rate

        // Calculate tax from ticket sales
        ResultSet ticketResult = stmt.executeQuery("SELECT SUM(price) FROM Tickets");
        double ticketSales = ticketResult.next() ? ticketResult.getDouble(1) : 0.0;
        double ticketTax = ticketSales * taxRate;

        // Calculate tax from product sales
        ResultSet productResult = stmt.executeQuery("SELECT SUM(total_price) FROM Sales");
        double productSales = productResult.next() ? productResult.getDouble(1) : 0.0;
        double productTax = productSales * taxRate;

        // Total tax
        double totalTax = ticketTax + productTax;

        taxReport.put("ticket_tax", ticketTax);
        taxReport.put("product_tax", productTax);
        taxReport.put("total_tax", totalTax);

        return taxReport;
    }

    public Map<String, Object> getSalesReportForMovie(String movieTitle) throws SQLException {
        // Generate a report on sales (ticket + product) for a specific movie
        Map<String, Object> salesReport = new HashMap<>();

        // Get ticket sales for the movie
        String ticketQuery = "SELECT SUM(price) FROM Tickets t JOIN Movies m ON t.movie_id = m.movie_id WHERE m.title = ?";
        PreparedStatement ticketStmt = conn.prepareStatement(ticketQuery);
        ticketStmt.setString(1, movieTitle);
        ResultSet ticketResult = ticketStmt.executeQuery();
        double ticketSales = ticketResult.next() ? ticketResult.getDouble(1) : 0.0;

        // Get product sales for the movie
        String productQuery = "SELECT SUM(s.total_price) FROM Sales s JOIN Tickets t ON s.ticket_id = t.ticket_id JOIN Movies m ON t.movie_id = m.movie_id WHERE m.title = ?";
        PreparedStatement productStmt = conn.prepareStatement(productQuery);
        productStmt.setString(1, movieTitle);
        ResultSet productResult = productStmt.executeQuery();
        double productSales = productResult.next() ? productResult.getDouble(1) : 0.0;

        salesReport.put("movie_title", movieTitle);
        salesReport.put("ticket_sales", ticketSales);
        salesReport.put("product_sales", productSales);
        salesReport.put("total_sales", ticketSales + productSales);

        return salesReport;
    }

    public Map<String, Object> generateFullReport() throws SQLException {
        // Generate a comprehensive full report including total revenue, tax report, and sales report by movie
        Map<String, Object> fullReport = new HashMap<>();
        fullReport.put("total_revenue", getTotalRevenue());
        fullReport.put("revenue_by_movie", getRevenueByMovie());
        fullReport.put("revenue_by_day", getRevenueByDay());
        fullReport.put("product_sales_report", getProductSalesReport());
        fullReport.put("tax_report", getTaxReport());

        return fullReport;
    }

    public void close() throws SQLException {
        // Close the database connection
        if (conn != null) {
            conn.close();
        }
    }

    public static void main(String[] args) {
        try {
            ReportGenerator generator = new ReportGenerator("cinema_center.db");

            // Generate and print a full report
            Map<String, Object> fullReport = generator.generateFullReport();
            System.out.println(fullReport);

            // Close the connection
            generator.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
