import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagerInterface {
    private String managerUser;
    private Map<String, Integer> productInventory;
    private List<Map<String, String>> employees;
    private double ticketPrice;
    private Map<String, Double> productPrice;
    private double ageDiscountRate;
    private double totalRevenue;
    private double totalTax;

    public ManagerInterface(String managerUser) {
        this.managerUser = managerUser;
        this.productInventory = new HashMap<>();
        this.productInventory.put("beverages", 100);
        this.productInventory.put("biscuits", 150);
        this.productInventory.put("toys", 200);

        this.employees = new ArrayList<>();
        this.ticketPrice = 10.0;

        this.productPrice = new HashMap<>();
        this.productPrice.put("beverages", 2.5);
        this.productPrice.put("biscuits", 1.5);
        this.productPrice.put("toys", 5.0);

        this.ageDiscountRate = 0.1;
        this.totalRevenue = 0.0;
        this.totalTax = 0.0;
    }

    public void increaseInventory(String product, int quantity) {
        if (productInventory.containsKey(product)) {
            productInventory.put(product, productInventory.get(product) + quantity);
            System.out.println("Added " + quantity + " units of " + product + " to inventory.");
        } else {
            System.out.println("Invalid product.");
        }
    }

    public void viewInventory() {
        System.out.println("Current Inventory:");
        for (Map.Entry<String, Integer> entry : productInventory.entrySet()) {
            System.out.println(entry.getKey().substring(0, 1).toUpperCase() + entry.getKey().substring(1) + ": " + entry.getValue() + " units");
        }
    }

    public void viewEmployees() {
        System.out.println("Employees:");
        for (Map<String, String> employee : employees) {
            System.out.println(employee.get("first_name") + " " + employee.get("last_name") + " - " + employee.get("role"));
        }
    }

    public void manageEmployee(String action, int employeeId, String firstName, String lastName, String username, String password, String role) {
        if ("hire".equals(action)) {
            Map<String, String> newEmployee = new HashMap<>();
            newEmployee.put("first_name", firstName);
            newEmployee.put("last_name", lastName);
            newEmployee.put("username", username);
            newEmployee.put("password", password);
            newEmployee.put("role", role);
            employees.add(newEmployee);
            System.out.println("Employee " + firstName + " " + lastName + " hired successfully.");
        } else if ("fire".equals(action) && employeeId >= 0 && employeeId < employees.size()) {
            Map<String, String> removedEmployee = employees.remove(employeeId);
            System.out.println("Employee " + removedEmployee.get("first_name") + " " + removedEmployee.get("last_name") + " fired.");
        } else {
            System.out.println("Invalid employee ID or action.");
        }
    }

    public void updateTicketPrice(double newPrice) {
        this.ticketPrice = newPrice;
        System.out.println("Ticket price updated to $" + newPrice + ".");
    }

    public void updateProductPrice(String product, double newPrice) {
        if (productPrice.containsKey(product)) {
            productPrice.put(product, newPrice);
            System.out.println("The price of " + product + " updated to $" + newPrice + ".");
        } else {
            System.out.println("Invalid product.");
        }
    }

    public void updateAgeDiscount(double newDiscountRate) {
        if (newDiscountRate >= 0 && newDiscountRate <= 1) {
            this.ageDiscountRate = newDiscountRate;
            System.out.println("Age discount rate updated to " + (newDiscountRate * 100) + "%.");
        } else {
            System.out.println("Invalid discount rate. It should be between 0 and 1.");
        }
    }

    public void viewTotalRevenue() {
        System.out.printf("Total Revenue: $%.2f%n", totalRevenue);
        System.out.printf("Total Tax: $%.2f%n", totalTax);
    }

    public void calculateRevenue(double ticketSales, double productSales) {
        this.totalRevenue += ticketSales + productSales;
        this.totalTax += (ticketSales + productSales) * 0.1; // Assuming 10% tax rate
        System.out.printf("Revenue and tax updated: $%.2f, Tax: $%.2f%n", totalRevenue, totalTax);
    }
}
