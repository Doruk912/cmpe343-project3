import java.sql.*;

public class DatabaseHandler {
    private Connection conn;
    private Statement stmt;

    public DatabaseHandler(String dbName) throws SQLException {
        // Initialize the DatabaseHandler with the provided database name.
        conn = DriverManager.getConnection("jdbc:sqlite:" + dbName);
        stmt = conn.createStatement();
    }

    public void createTables() throws SQLException {
        // Creating Movies table
        String createMoviesTable = "CREATE TABLE IF NOT EXISTS Movies (" +
                "movie_id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "title TEXT NOT NULL," +
                "poster TEXT," +
                "genre TEXT," +
                "summary TEXT" +
                ")";
        stmt.execute(createMoviesTable);

        // Creating Users table (for authentication)
        String createUsersTable = "CREATE TABLE IF NOT EXISTS Users (" +
                "user_id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "username TEXT NOT NULL UNIQUE," +
                "password TEXT NOT NULL," +
                "role TEXT NOT NULL" +
                ")";
        stmt.execute(createUsersTable);

        // Creating Tickets table
        String createTicketsTable = "CREATE TABLE IF NOT EXISTS Tickets (" +
                "ticket_id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "user_id INTEGER," +
                "movie_id INTEGER," +
                "seat TEXT," +
                "price REAL," +
                "purchase_date TEXT," +
                "FOREIGN KEY(user_id) REFERENCES Users(user_id)," +
                "FOREIGN KEY(movie_id) REFERENCES Movies(movie_id)" +
                ")";
        stmt.execute(createTicketsTable);

        // Creating Products table (for additional items)
        String createProductsTable = "CREATE TABLE IF NOT EXISTS Products (" +
                "product_id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "name TEXT NOT NULL," +
                "price REAL," +
                "stock_quantity INTEGER" +
                ")";
        stmt.execute(createProductsTable);

        // Creating Sales table (to record sales of products)
        String createSalesTable = "CREATE TABLE IF NOT EXISTS Sales (" +
                "sale_id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "ticket_id INTEGER," +
                "product_id INTEGER," +
                "quantity INTEGER," +
                "total_price REAL," +
                "FOREIGN KEY(ticket_id) REFERENCES Tickets(ticket_id)," +
                "FOREIGN KEY(product_id) REFERENCES Products(product_id)" +
                ")";
        stmt.execute(createSalesTable);

        // Creating Schedules table (for movie sessions)
        String createSchedulesTable = "CREATE TABLE IF NOT EXISTS Schedules (" +
                "schedule_id INTEGER PRIMARY KEY AUTOINCREMENT," +
                "movie_id INTEGER," +
                "hall TEXT," +
                "session_time TEXT," +
                "available_seats INTEGER," +
                "FOREIGN KEY(movie_id) REFERENCES Movies(movie_id)" +
                ")";
        stmt.execute(createSchedulesTable);
    }

    public void insertMovie(String title, String poster, String genre, String summary) throws SQLException {
        String insertMovieQuery = "INSERT INTO Movies (title, poster, genre, summary) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertMovieQuery)) {
            pstmt.setString(1, title);
            pstmt.setString(2, poster);
            pstmt.setString(3, genre);
            pstmt.setString(4, summary);
            pstmt.executeUpdate();
        }
    }

    public ResultSet getMovieByTitle(String title) throws SQLException {
        String getMovieQuery = "SELECT * FROM Movies WHERE title = ?";
        PreparedStatement pstmt = conn.prepareStatement(getMovieQuery);
        pstmt.setString(1, title);
        return pstmt.executeQuery();
    }

    public ResultSet getAllMovies() throws SQLException {
        String getAllMoviesQuery = "SELECT * FROM Movies";
        return stmt.executeQuery(getAllMoviesQuery);
    }

    public void insertUser(String username, String password, String role) throws SQLException {
        String insertUserQuery = "INSERT INTO Users (username, password, role) VALUES (?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertUserQuery)) {
            pstmt.setString(1, username);
            pstmt.setString(2, password);
            pstmt.setString(3, role);
            pstmt.executeUpdate();
        }
    }

    public ResultSet authenticateUser(String username, String password) throws SQLException {
        String authenticateUserQuery = "SELECT * FROM Users WHERE username = ? AND password = ?";
        PreparedStatement pstmt = conn.prepareStatement(authenticateUserQuery);
        pstmt.setString(1, username);
        pstmt.setString(2, password);
        return pstmt.executeQuery();
    }

    public void insertTicket(int userId, int movieId, String seat, double price, String purchaseDate) throws SQLException {
        String insertTicketQuery = "INSERT INTO Tickets (user_id, movie_id, seat, price, purchase_date) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertTicketQuery)) {
            pstmt.setInt(1, userId);
            pstmt.setInt(2, movieId);
            pstmt.setString(3, seat);
            pstmt.setDouble(4, price);
            pstmt.setString(5, purchaseDate);
            pstmt.executeUpdate();
        }
    }

    public void insertProduct(String name, double price, int stockQuantity) throws SQLException {
        String insertProductQuery = "INSERT INTO Products (name, price, stock_quantity) VALUES (?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertProductQuery)) {
            pstmt.setString(1, name);
            pstmt.setDouble(2, price);
            pstmt.setInt(3, stockQuantity);
            pstmt.executeUpdate();
        }
    }

    public ResultSet getProductByName(String name) throws SQLException {
        String getProductQuery = "SELECT * FROM Products WHERE name = ?";
        PreparedStatement pstmt = conn.prepareStatement(getProductQuery);
        pstmt.setString(1, name);
        return pstmt.executeQuery();
    }

    public void updateProductStock(int productId, int quantity) throws SQLException {
        String updateProductStockQuery = "UPDATE Products SET stock_quantity = stock_quantity + ? WHERE product_id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateProductStockQuery)) {
            pstmt.setInt(1, quantity);
            pstmt.setInt(2, productId);
            pstmt.executeUpdate();
        }
    }

    public void insertSale(int ticketId, int productId, int quantity, double totalPrice) throws SQLException {
        String insertSaleQuery = "INSERT INTO Sales (ticket_id, product_id, quantity, total_price) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertSaleQuery)) {
            pstmt.setInt(1, ticketId);
            pstmt.setInt(2, productId);
            pstmt.setInt(3, quantity);
            pstmt.setDouble(4, totalPrice);
            pstmt.executeUpdate();
        }
    }

    public ResultSet getScheduleForMovie(int movieId) throws SQLException {
        String getScheduleQuery = "SELECT * FROM Schedules WHERE movie_id = ?";
        PreparedStatement pstmt = conn.prepareStatement(getScheduleQuery);
        pstmt.setInt(1, movieId);
        return pstmt.executeQuery();
    }

    public void close() throws SQLException {
        conn.close();
    }
}
